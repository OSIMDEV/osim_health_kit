group 'com.osim.healthkit'
version '1.0-SNAPSHOT'

buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
        maven { url 'https://developer.huawei.com/repo/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("com.huawei.agconnect:agcp:1.9.1.301")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://developer.huawei.com/repo/' }
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.huawei.agconnect'
apply plugin: 'kotlin-kapt'

android {
    if (project.android.hasProperty("namespace")) {
        namespace 'com.osim.healthkit'
    }

    ext {
        health_kit_settings = readHealthKitSettings()
    }

    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    defaultConfig {
        minSdkVersion 23

        manifestPlaceholders['huawei_healthkit_appid'] = health_kit_settings['HEALTH_KIT_ID_HUAWEI']
    }

    dependencies {
        implementation("androidx.activity:activity-ktx:1.6.0")
        implementation 'com.blankj:utilcodex:1.31.1'
        // HuaWei HealthKit
        implementation 'com.huawei.hms:hwid:6.12.0.300'
        implementation 'com.huawei.hms:health:6.11.0.303'
        implementation 'com.huawei.hihealth:hihealthkit:6.7.0.300'
        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation 'org.mockito:mockito-core:5.0.0'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}

def readHealthKitSettings() {
    def ret = [:]
    def lines = file('health_kit.settings.properties').readLines()
    lines.removeAll {
        it.startsWith('#')
    }
    lines.forEach {
        def (key, value) = it.replaceAll("\\s+", '').split('=')
        ret[key] = value
    }
    return ret
}